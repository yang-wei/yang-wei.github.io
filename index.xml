<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>http://yang-wei.github.io/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright><lastBuildDate>Thu, 04 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://yang-wei.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>A Step to Step Guide to Elm Signal</title><link>http://yang-wei.github.io/post/2016/02/04/a-step-to-step-guide-to-elm-signal/</link><pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2016/02/04/a-step-to-step-guide-to-elm-signal/</guid><description>When I first start to learn Elm, I failed to understand Elm Signal. Luckily there is a start-app which wrap up Signal so that I don&amp;rsquo;t have to understant it to start playing with Elm. However, I like to understand how the tool I use work so I decided to spend time on it.
From the Elm documentation,
A signal is a value that changes over time
In Elm, anything that changes over time can be Signal including time itself(chill, will explain later).</description></item><item><title>Javascript Destructuring Assignment and Spread Operator</title><link>http://yang-wei.github.io/post/2016/01/15/javascript-destructuring-assignment-and-spread-operator/</link><pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2016/01/15/javascript-destructuring-assignment-and-spread-operator/</guid><description>We will first discussed how destructuring and spread operator can be used in ES6 - in arrays and objects. Then we will look at a few examples and also discuss some interesting quiz.
arrays var array = [1, 2, 3, 4]; var nestedArray = [1, 2, 3, 4, [7, 8, 9]]; var [a, b, c, d] = array; console.log(a, b, c, d) // -------- 1 2 3 4 var [a, , , d, [x, y, z]] = nestedArray; console.</description></item><item><title>Vue Dot Js Server Side Rendered Data</title><link>http://yang-wei.github.io/post/2016/01/13/vue-dot-js-server-side-rendered-data/</link><pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2016/01/13/vue-dot-js-server-side-rendered-data/</guid><description>Currently I had been using Vue.js in work and hobby so I would like to share something I learnt.
Note: Examples are tested in Vue.js 1.0
When you start your Vue.js application, the first thing you do is probably getting data from your backend or api. Let&amp;rsquo;s say we have a list of comments from our backend server.
new App({ created() { fetch(&amp;#39;/comments&amp;#39;) // using ajax etc .</description></item><item><title>2015 in Review</title><link>http://yang-wei.github.io/post/2015/12/30/2015-in-review/</link><pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/12/30/2015-in-review/</guid><description>2015 is coming to the end, so I decided to sum up happenings and things I had learn in throughout this year related to programming.
End of Student life Indeed this will be the last year of my student life (until March 2016, 3 more months to go). Being a student is really blissful. All you have to worry is to learn and feed yourself with knowledge everyday. Although I am not completely agree with Japanese education system but I had learn the most important thing in school - that is learning how to learn.</description></item><item><title>Clojure Thread First vs Thread Last Macros</title><link>http://yang-wei.github.io/post/2015/11/18/clojure-thread-first-vs-thread-last-macros/</link><pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/11/18/clojure-thread-first-vs-thread-last-macros/</guid><description>In this post, I am going to show you {when|how} to use Clojure marcos, -&amp;gt;&amp;gt; aka thread-last and -&amp;gt; aka thread-first. In some case, -&amp;gt; and -&amp;gt;&amp;gt; may perform the same operation if you do not pay enough attention. So I will also show you what&amp;rsquo;s the difference between them. Note that doc -&amp;gt; and docs -&amp;gt;&amp;gt; din&amp;rsquo;t make sense for me at first, so if same thing happened to you I hope that this post will make it clear.</description></item><item><title>Update Jvm Version in Mac</title><link>http://yang-wei.github.io/post/2015/10/01/update-jvm-version-in-mac/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/10/01/update-jvm-version-in-mac/</guid><description>Being a newbie for Clojure, the problem I met when trying to use its other core library - clojure.core.reducers is the &amp;ldquo;namespace not found&amp;hellip;&amp;rdquo;.
(require &amp;#39;[clojure.core.reducers :as r]) Get this:
clojure.lang.Compiler$CompilerException: java.lang.Exception: namespace &amp;lsquo;clojure.core.reducers&amp;rsquo; not found, compiling: &amp;hellip; &amp;hellip; &amp;hellip; Caused by: java.lang.Exception: namespace &amp;lsquo;clojure.core.reducers&amp;rsquo; not found
From the docs,
(ns ^{:doc &amp;#34;A library for reduction and parallel folding. Alpha and subject to change. Note that fold and its derivatives require Java 7+ or Java 6 + jsr166y.</description></item><item><title>Clojure Strings Are Sequence</title><link>http://yang-wei.github.io/post/2015/09/23/clojure-strings-are-sequence/</link><pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/09/23/clojure-strings-are-sequence/</guid><description>As a newbie to Clojure, I am sure all of us will meet one problem when dealing with string. Let&amp;rsquo;s say we have a long string.
&amp;#34;This is a long string !&amp;#34; -&amp;gt; &amp;#34;This is a long string !&amp;#34; // clojure will give us back this What if we want to remove all spaces ? Let&amp;rsquo;s say we&amp;rsquo;ll solve this by filter through the text and apply a function to check if it&amp;rsquo;s a space.</description></item><item><title>Redirecting a Page Using Javascript</title><link>http://yang-wei.github.io/post/2015/09/22/redirecting-a-page-using-javascript/</link><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/09/22/redirecting-a-page-using-javascript/</guid><description>If you are writing web app using JavaScript heavily, you might need to do redirect on the browser.
window.location object One of the method we can refer to is the global location object. It does provide some method for us to do the redirect.
location.replace(&amp;#34;http://google.com&amp;#34;); location.assign(&amp;#34;http://google.com&amp;#34;); Or we can assign the url directly to the object.
location = &amp;quot;http://google.com&amp;quot; // more explicit way location.href = &amp;quot;http://google.com&amp;quot;; If you want a more explicit way:</description></item><item><title>Initialize an Array With Fix Length in Javascript</title><link>http://yang-wei.github.io/post/2015/09/14/initialize-an-array-with-fix-length-in-javascript/</link><pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/09/14/initialize-an-array-with-fix-length-in-javascript/</guid><description>In JavaScript, we love array. Furthermore, since the wonderful Array Extras added in ES5, it gives us the power to program in a more expressive way with array.
var friends = [&amp;#34;Ali&amp;#34;, &amp;#34;Winson&amp;#34;, &amp;#34;John&amp;#34;]; var sayHiToFriends = friends.map(function(friend) { return &amp;#34;Hi &amp;#34; + friend; }); console.log(friends); // [&amp;#34;Ali&amp;#34;, &amp;#34;Winson&amp;#34;, &amp;#34;John&amp;#34;] console.log(sayHiToFriends); // [&amp;#34;Hi Ali&amp;#34;, &amp;#34;Hi Winson&amp;#34;, &amp;#34;Hi John&amp;#34;] Note that friends value doesn&amp;rsquo;t change. Array.prototype.map return a new array for us.</description></item><item><title>Lesson Learned From Developing Large Web Application</title><link>http://yang-wei.github.io/post/2015/07/24/lesson-learned-from-developing-large-web-application/</link><pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/07/24/lesson-learned-from-developing-large-web-application/</guid><description>Recently, I&amp;rsquo;ve been building Tech Train - which is a platform for students to enchance their web development skill. Until now this service is only release for particular group of students, so I&amp;rsquo;m not going to talk much about it. I can say it&amp;rsquo;s a small clone(means not as much feature as) of codecademy and stack overflow.
Small team of us begin to build(part-time-ly) this around Jun 2015 and it took almost 2 months to complete.</description></item><item><title>Namespacing and Autoloading in Php</title><link>http://yang-wei.github.io/post/2015/03/09/namespacing-and-autoloading-in-php/</link><pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/03/09/namespacing-and-autoloading-in-php/</guid><description>Recently, I have to revisit PHP because of a new project and I realized that namespace is totally new for me. So I thought it&amp;rsquo;ll be good to write down a quick note. This post will go quickly on how namespacing and autoloading work in PHP by using Composer.
###Our Application Our application is just a simple page echoing some text using json_encode method. Let&amp;rsquo;s create a index.php and write all our codes inside.</description></item><item><title>Moving React Component to Server Side</title><link>http://yang-wei.github.io/post/2014/12/14/moving-react-component-to-server-side/</link><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/12/14/moving-react-component-to-server-side/</guid><description>###React Server Side Rendering Example I had a hard time doing this, the documentation(currently v0.12.1) doesn&amp;rsquo;t provide enough information regarding to server side rendering at the time this post was writting. Most tutorials are either outdated or din&amp;rsquo;t really focus on this topic. Also, there are too many tools used in most examples that beginner like me will hardly understand. So I decided to write down what I had learn by and explain the tools needed to render React components on server side after struggling long enough to make it works.</description></item><item><title>A Better Typeof in Javascript</title><link>http://yang-wei.github.io/post/2014/11/16/a-better-typeof-in-javascript/</link><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/11/16/a-better-typeof-in-javascript/</guid><description>In Javascript, there is a typeof operator to indicate the type of operand provided. However, typeof only return object or primitive value.
{% blockquote MDN https://developer.mozilla.org/en-US/docs/Glossary/Primitive Primitive %} A primitive (primitive value, primitive data type) is data that is not an Object and does not have any methods. {% endblockquote %}
So in short,
primitive - String, Number, Boolean, Null, undefined, Symbol(new in ECMAScript 6) non-primitive - object including Array, Function, and Object This mean that if we use typeof to test primitive values, we will get the result we want except some strange cases.</description></item><item><title>Vim Multiple Cursors to Insert Text</title><link>http://yang-wei.github.io/post/2014/09/24/vim-multiple-cursors-to-insert-text/</link><pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/09/24/vim-multiple-cursors-to-insert-text/</guid><description>Quick blog for multiple cursor in Vim. For example we have the html below.
&amp;lt;div id=&amp;#34;id1&amp;#34;&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;id2&amp;#34;&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;id3&amp;#34;&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;id4&amp;#34;&amp;gt;4&amp;lt;/div&amp;gt; And we want to insert same class after id for every div element. Here is what we do in Vim.
First place cursor after id=&amp;quot;id1&amp;quot;.
Use Ctrl-v, and jjj(move 3 lines below) to select visual block.
Press I to switch to insert mode and start typing our class eg:class=&amp;quot;my-class&amp;quot;.</description></item><item><title>Git Slash Github Flow for Beginner and Small Team</title><link>http://yang-wei.github.io/post/2014/09/16/git-slash-github-flow-for-beginner-and-small-team/</link><pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/09/16/git-slash-github-flow-for-beginner-and-small-team/</guid><description>It&amp;rsquo;s been a while since my last update. I am back and would like to write down something I learned through both internships which I participated last month. One of the new thing I want to highlight is probably team developement flow on github. Before this, I was using github in my personal project like simplified and everything was easy. No issue, no pull request and no conflict !!! However, thing totally changes when there are multiple developers in the same project.</description></item><item><title>Javascript Simple Stop Watch</title><link>http://yang-wei.github.io/post/2014/07/20/javascript-simple-stop-watch/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/07/20/javascript-simple-stop-watch/</guid><description>In this post, we&amp;rsquo;ll see how to create a simple 3 minutes stop watch application by Javascript. Time will be counted by using setInterval() function. Nothing difficult here, let&amp;rsquo;s first looks at HTML first.
&amp;lt;h3&amp;gt;3 Minutes Stop Watch&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span id=&amp;quot;min&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;min &amp;lt;span id=&amp;quot;sec&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;sec &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;button id=&amp;quot;start&amp;quot;&amp;gt;Start&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;stop&amp;quot; disabled&amp;gt;Stop&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;reset&amp;quot;&amp;gt;Reset&amp;lt;/button&amp;gt; &amp;lt;/p&amp;gt; Text for showing remaining minutes and seconds are created in the &amp;lt;span&amp;gt; tag. This stopwatch contains 3 buttons which are start, stop, reset.</description></item><item><title>Converting Xml to Json by Php</title><link>http://yang-wei.github.io/post/2014/07/14/converting-xml-to-json-by-php/</link><pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/07/14/converting-xml-to-json-by-php/</guid><description>{% blockquote Chris Maden %} XML is like violence: if it doesn&amp;rsquo;t solve your problem, you aren&amp;rsquo;t using enough of it. {% endblockquote %}
This post aims to convert bulk of xml data in a folder to the json(Javascript String Object Notation) format. Through this way we can remove unwanted data or filter the data to a specific format, thus increasing the flexibility of our output data.
simplexml_load_file() This function converts XML document into an object.</description></item><item><title>Playing Between Unix Time and Human Readable Time in Php</title><link>http://yang-wei.github.io/post/2014/05/19/playing-between-unix-time-and-human-readable-time-in-php/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/05/19/playing-between-unix-time-and-human-readable-time-in-php/</guid><description>Unix time is widely used in unix-like operatin system to track down the total seconds. PHP provides some easy way to convert between Unix Time and Human Time, let&amp;rsquo;s first look at the date() function. date() formats a local time/date according to its parameter format.
{% blockquote Wikipedia %} Unix time (aka POSIX time or Epoch time), is a system for describing instants in time, defined as the number of seconds that have elapsed since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970, not counting leap second.</description></item><item><title>Local Svn Repository Workflow</title><link>http://yang-wei.github.io/post/2014/05/11/local-svn-repository-workflow/</link><pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/05/11/local-svn-repository-workflow/</guid><description>This tutorial will outline the simple workflow to create a SVN local repository. Of course you can get a free online repository from website like assembla. However for simplicity and first time, I will just create a repository on local machine.
###Installing If you do not have SVN installed on your machine, you can go and grab it here according to your OS.
# for Ubuntu/Debian user $ apt-get install subversion $ apt-get install libapache2-svn ###Create repository Let&amp;rsquo;s start by creating a new repository.</description></item><item><title>Vagrant Up With Lamp Server</title><link>http://yang-wei.github.io/post/2014/05/10/vagrant-up-with-lamp-server/</link><pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/05/10/vagrant-up-with-lamp-server/</guid><description>###Download and Create Project First of all, download VirtualBox and Vagrant. Also do not forget the VirtualBox Extension Pack
After installing, create a directory for project and initialize the directory.
$ mkdir project $ cd project $ vagrant init # Creates Vagrantfile Of course, we can follow the documentation to do vagrant box add hashicorp/precise32 but let&amp;rsquo;s conclude it into our Vagrantfile. Let&amp;rsquo;s create new provisioning script- install.sh in our project root to install apache, PHP, mysql, XDebug, Composer etc.</description></item><item><title>Before a Python Project Virtualenv</title><link>http://yang-wei.github.io/post/2014/05/07/before-a-python-project-virtualenv/</link><pubDate>Wed, 07 May 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/05/07/before-a-python-project-virtualenv/</guid><description>###Introduction virtualenv is a tool to create isolated Python enviroments.
Imagine that when you have a few projects on hand simultaneously, and each project requires different Python package. Of course you can install the package i.e:Django globally on your /usr/bin/python but it&amp;rsquo;s not recommendeded to install packages gloablly. For instance, let&amp;rsquo;s install Django package globally into your computer via pip.
$ sudo pip install django pip is a tool for installing and managing Python packages.</description></item><item><title>Python List vs Tuple</title><link>http://yang-wei.github.io/post/2014/05/06/python-list-vs-tuple/</link><pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/05/06/python-list-vs-tuple/</guid><description>Syntax First of all, let&amp;rsquo;s write down list and tuple syntax.
l = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, 54, &amp;#34;hello&amp;#34;] # This is a list t = (&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, 54, &amp;#34;hello&amp;#34;) # This is a tuple i = (1) # Be careful, this is an integer! The minor differences between their syntax are square brackets [] and
Differences Size Basically tuples are fixed size whereas lists are dynamic. Get ready with your terminal.</description></item><item><title>About</title><link>http://yang-wei.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/about/</guid><description>About Yourself</description></item></channel></rss>