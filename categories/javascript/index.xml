<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on</title><link>http://yang-wei.github.io/categories/javascript/</link><description>Recent content in javascript on</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright><lastBuildDate>Fri, 15 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://yang-wei.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Javascript Destructuring Assignment and Spread Operator</title><link>http://yang-wei.github.io/post/2016/01/15/javascript-destructuring-assignment-and-spread-operator/</link><pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2016/01/15/javascript-destructuring-assignment-and-spread-operator/</guid><description>We will first discussed how destructuring and spread operator can be used in ES6 - in arrays and objects. Then we will look at a few examples and also discuss some interesting quiz.
arrays var array = [1, 2, 3, 4]; var nestedArray = [1, 2, 3, 4, [7, 8, 9]]; var [a, b, c, d] = array; console.log(a, b, c, d) // -------- 1 2 3 4 var [a, , , d, [x, y, z]] = nestedArray; console.</description></item><item><title>Initialize an Array With Fix Length in Javascript</title><link>http://yang-wei.github.io/post/2015/09/14/initialize-an-array-with-fix-length-in-javascript/</link><pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2015/09/14/initialize-an-array-with-fix-length-in-javascript/</guid><description>In JavaScript, we love array. Furthermore, since the wonderful Array Extras added in ES5, it gives us the power to program in a more expressive way with array.
var friends = [&amp;#34;Ali&amp;#34;, &amp;#34;Winson&amp;#34;, &amp;#34;John&amp;#34;]; var sayHiToFriends = friends.map(function(friend) { return &amp;#34;Hi &amp;#34; + friend; }); console.log(friends); // [&amp;#34;Ali&amp;#34;, &amp;#34;Winson&amp;#34;, &amp;#34;John&amp;#34;] console.log(sayHiToFriends); // [&amp;#34;Hi Ali&amp;#34;, &amp;#34;Hi Winson&amp;#34;, &amp;#34;Hi John&amp;#34;] Note that friends value doesn&amp;rsquo;t change. Array.prototype.map return a new array for us.</description></item><item><title>A Better Typeof in Javascript</title><link>http://yang-wei.github.io/post/2014/11/16/a-better-typeof-in-javascript/</link><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/11/16/a-better-typeof-in-javascript/</guid><description>In Javascript, there is a typeof operator to indicate the type of operand provided. However, typeof only return object or primitive value.
{% blockquote MDN https://developer.mozilla.org/en-US/docs/Glossary/Primitive Primitive %} A primitive (primitive value, primitive data type) is data that is not an Object and does not have any methods. {% endblockquote %}
So in short,
primitive - String, Number, Boolean, Null, undefined, Symbol(new in ECMAScript 6) non-primitive - object including Array, Function, and Object This mean that if we use typeof to test primitive values, we will get the result we want except some strange cases.</description></item><item><title>Javascript Simple Stop Watch</title><link>http://yang-wei.github.io/post/2014/07/20/javascript-simple-stop-watch/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>http://yang-wei.github.io/post/2014/07/20/javascript-simple-stop-watch/</guid><description>In this post, we&amp;rsquo;ll see how to create a simple 3 minutes stop watch application by Javascript. Time will be counted by using setInterval() function. Nothing difficult here, let&amp;rsquo;s first looks at HTML first.
&amp;lt;h3&amp;gt;3 Minutes Stop Watch&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span id=&amp;quot;min&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;min &amp;lt;span id=&amp;quot;sec&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;sec &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;button id=&amp;quot;start&amp;quot;&amp;gt;Start&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;stop&amp;quot; disabled&amp;gt;Stop&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;reset&amp;quot;&amp;gt;Reset&amp;lt;/button&amp;gt; &amp;lt;/p&amp;gt; Text for showing remaining minutes and seconds are created in the &amp;lt;span&amp;gt; tag. This stopwatch contains 3 buttons which are start, stop, reset.</description></item></channel></rss>